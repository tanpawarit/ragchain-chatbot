#!/usr/bin/env python3
"""
‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° conversation ‡πÅ‡∏•‡∏∞ user experience
"""

import time
from typing import Dict, List

from src.components.ragchain_runner import RAGChainRunner
from src.utils.config.app_config import AppConfig
from src.utils.pipeline.vectorstore_manager import load_vectorstore


class SimpleSalesChatbot:
    """‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢"""

    def __init__(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó"""
        print("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó...")

        # ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        self.cfg = AppConfig.from_files("configs/model_config.yaml", "config.yaml")

        # ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏∞‡∏ö‡∏ö RAG
        vectorstore = load_vectorstore(self.cfg)
        self.rag = RAGChainRunner(self.cfg, vectorstore=vectorstore)

        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
        self.conversation_history: List[Dict[str, str]] = []
        self.user_id = f"user_{int(time.time())}"

        print("‚úÖ ‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")

    def greet_user(self):
        """‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
        greeting = """
üéâ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Investic!

‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠ AI Assistant ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≤‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö:
‚Ä¢ ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
‚Ä¢ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô  
‚Ä¢ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£
‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°

üí¨ ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡∏ú‡∏°‡∏î‡∏π‡∏™‡∏¥‡∏Ñ‡∏£‡∏±‡∏ö!
        """
        print(greeting)

    def get_quick_suggestions(self) -> List[str]:
        """‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏î‡πà‡∏ß‡∏ô"""
        return [
            "‡∏°‡∏µ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á?",
            "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà?",
            "‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡πÑ‡∏´‡∏°?",
            "‡∏à‡∏∞‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏¢‡∏±‡∏á‡πÑ‡∏á?",
            "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°?",
        ]

    def show_suggestions(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"""
        suggestions = self.get_quick_suggestions()
        print("\nüí° ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°:")
        for i, suggestion in enumerate(suggestions, 1):
            print(f"   {i}. {suggestion}")
        print("   ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!")

    def save_conversation(self, question: str, answer: str):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤"""
        self.conversation_history.append(
            {
                "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
                "question": question,
                "answer": answer[:100] + "..." if len(answer) > 100 else answer,
            }
        )

    def get_answer(self, question: str) -> str:
        """‡πÑ‡∏î‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö RAG"""
        try:
            answer = self.rag.answer(question, user_id=self.user_id)
            self.save_conversation(question, answer)
            return answer
        except Exception as e:
            error_msg = f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}"
            self.save_conversation(question, error_msg)
            return error_msg

    def show_conversation_summary(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤"""
        if not self.conversation_history:
            return

        print("\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤:")
        print(f"   ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {len(self.conversation_history)}")
        print("   ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:")
        for conv in self.conversation_history[-3:]:  # ‡πÅ‡∏™‡∏î‡∏á 3 ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            print(f"   ‚Ä¢ {conv['question']}")

    def run(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤"""
        self.greet_user()
        self.show_suggestions()

        print("\n" + "=" * 50)
        print("üí¨ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ (‡∏û‡∏¥‡∏°‡∏û‡πå 'quit' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å)")
        print("=" * 50)

        while True:
            try:
                # ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                question = input("\nüë§ ‡∏Ñ‡∏∏‡∏ì: ").strip()

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©
                if question.lower() in ["quit", "exit", "‡∏≠‡∏≠‡∏Å", "‡∏à‡∏ö"]:
                    break
                elif question.lower() in ["help", "‡∏ä‡πà‡∏ß‡∏¢"]:
                    self.show_suggestions()
                    continue
                elif question.lower() in ["summary", "‡∏™‡∏£‡∏∏‡∏õ"]:
                    self.show_conversation_summary()
                    continue
                elif not question:
                    print("‚ùì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏£‡∏±‡∏ö")
                    continue

                # ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
                print("ü§ñ ‡πÄ‡∏£‡∏≤: ", end="", flush=True)
                answer = self.get_answer(question)
                print(answer)

            except KeyboardInterrupt:
                break
            except Exception as e:
                print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

        # ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
        self.show_conversation_summary()
        print("\nüëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ Investic!")
        print("üéØ ‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ!")


def main():
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó"""
    try:
        chatbot = SimpleSalesChatbot()
        chatbot.run()
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ: {e}")
        print("üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")


if __name__ == "__main__":
    main()
